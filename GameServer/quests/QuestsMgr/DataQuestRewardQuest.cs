/*
 * DAWN OF LIGHT - The first free open source DAoC server emulator
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */

using System;
using System.Linq;
using System.Collections.Generic;
using System.Reflection;

using DOL.AI.Brain;
using DOL.Database;
using DOL.Events;
using DOL.Language;
using DOL.GS.Behaviour;
using DOL.GS.PacketHandler;

using log4net;
using DOL.GS.Finance;
using System.Collections.Specialized;
using System.Text;
using DOL.GS.Geometry;

namespace DOL.GS.Quests
{


	public class DQRewardQ : AbstractQuest
	{
		private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

		protected int m_step = 1;
		protected DBRewardQuest m_dataQuest = null;
		protected CharacterXRewardQuest m_charQuest = null;
		protected GameObject m_startObject = null;
		protected GameNPC m_startNPC = null;
		protected IDQRewardQStep m_customQuestStep = null;
        protected DQRQuestGoal newgoals = null;
        protected string collectItem = "";
        protected string m_lastErrorText = "";
        protected int firstGoals = 0;

        /// <summary>
        /// In order to avoid conflicts with scripted quests data quest ID's are added to this number when sending a quest ID to the client
        /// </summary>
        public const ushort DQREWARDQ_CLIENTOFFSET = 34767; // ADDED AN EXTRA 2000 TO THIS, I DONT THINK WE NEED MORE QUESTS THAN THAT      

        /// <summary>
        /// A string containing the last error message generated by this quest
        /// </summary>
        public string LastErrorText
        {
            get { return m_lastErrorText; }
            set { m_lastErrorText = value; }
        }


		/// <summary>
		/// How does this quest start
		/// </summary>
		public enum eStartType : byte
		{
			Standard = 0,			// Talk to npc, accept quest, go through steps
			Collection = 1,			// Player turns drops into npc for xp, quest not added to player quest log, has no steps
			AutoStart = 2,			// Standard quest is auto started simply by interacting with start object
			KillComplete = 3,		// Killing the Start living grants and finished the quest, similar to One Time Drops
			InteractComplete = 4,	// Interacting with start object grants and finishes the quest
            SearchStart = 5,        // Quest is started by searching in the designated QuestSearchArea
			RewardQuest = 200,		// A reward quest, where reward dialog is given to player on quest offer and complete.  
			Unknown = 255
		}

		/// <summary>
		/// The type of each quest step
		/// All quests with steps must end in a Finish step
		/// </summary>
		public enum eStepType : byte
		{
			Kill = 0,				// Kill the target to advance the quest.  Can set chance to drop on StepItemTemplate.
            KillFinish = 1,			// Killing the target finishes the quest and gives the reward.  Can set chance to drop on StepItemTemplate.
			Deliver = 2,			// Deliver an item to the target to advance the quest
			DeliverFinish = 3,		// Deliver an item to the target to finish the quest
			Interact = 4,			// Interact with the target to advance the step
			InteractFinish = 5,		// Interact with the target to finish the quest.  This is required to end a RewardQuest
			Whisper = 6,			// Whisper to the target to advance the quest
			WhisperFinish = 7,		// Whisper to the target to finish the quest

            Search = 8,				// Search in a specified location. Can set chance to drop on StepItemTemplate.
            SearchFinish = 9,		// Search in a specified location to finish the quest. Can set chance to drop on StepItemTemplate.

			Collect = 10,			// Player must give the target an item to advance the step
			CollectFinish = 11,		// Player must give the target an item to finish the quest

			Unknown = 255
		}

        /// <summary>
        /// A static list of every search area for all data quests
        /// </summary>
        protected static List<KeyValuePair<int, QuestSearchArea>> m_allQuestSearchAreas = new List<KeyValuePair<int, QuestSearchArea>>();

        /// <summary>
        /// How many search areas are part of this quest
        /// </summary>
        protected int m_numSearchAreas = 0;

        /// <summary>
        /// An item given to a player when starting with a search.
        /// </summary>
		/// 

        protected List<string> m_questGoals = new List<string>(); // initial list of quest goals upon starting the quest
        protected List<DQRQuestGoal.GoalType> m_goalType = new List<DQRQuestGoal.GoalType>(); // the quest goal types kill, interact etc
        protected List<int> m_goalRepeatNo = new List<int>(); // how many times does goal need to be met ie (0/3)
        protected List<string> m_goalTargetName = new List<string>(); // the target object/NPC name for the goal		
        protected List<string> m_goalTargetText = new List<string>(); // target text, used for mob to say somethen when slain, or interact
        protected List<int> m_goalStepPosition = new List<int>(); // at what step is this goal created
        protected List<string> m_advanceTexts = new List<string>(); // whisper text needed to advance an interact goal				
        protected List<string> m_collectItems = new List<string>(); // the dummy itemtemplate a player must collect/deliver. Used for its icon image in journal
        protected List<DQRQuestGoal> m_goals = new List<DQRQuestGoal>(); // list of all the goals for this quest
        byte m_numOptionalRewardsChoice = 0; // how many optional rewards a player can choose at end of quest
        protected List<ItemTemplate> m_optionalRewards = new List<ItemTemplate>(); // itemtemplates of optional rewards
        protected List<ItemTemplate> m_optionalRewardChoice = new List<ItemTemplate>(); // itemtemplates of the chosen optional rewards upon completion
        protected int[] m_rewardItemsChosen = null; // position of reward item chosen, sent in packet
        protected List<ItemTemplate> m_finalRewards = new List<ItemTemplate>(); // standard rewards for this quest		
        protected List<string> m_questDependencies = new List<string>(); // quests that needed completion before this quest is offered
        protected List<byte> m_allowedClasses = new List<byte>(); // allowed classes for this quest		
        string m_classType = ""; // the optional classtype/script that can be called to implement custom actions during the quest.
                                 // location info of goal to put red dot on map
        protected List<int> m_xOffset = new List<int>();
        protected List<int> m_yOffset = new List<int>();
        protected List<int> m_zoneID = new List<int>();

        protected string m_searchStartItemTemplate = "";

		protected List<string> m_sourceTexts = new List<string>();
		protected List<string> m_targetNames = new List<string>();
		protected List<ushort> m_targetRegions = new List<ushort>();
		protected List<string> m_targetTexts = new List<string>();
		protected List<eStepType> m_stepTypes = new List<eStepType>();
		protected List<string> m_stepTexts = new List<string>();
		protected List<string> m_stepItemTemplates = new List<string>();
		protected List<long> m_rewardXPs = new List<long>();
		// CLXP added
		protected List<long> m_rewardCLXPs = new List<long>();
		// RP added
		protected List<long> m_rewardRPs = new List<long>();
		// BP added
		protected List<long> m_rewardBPs = new List<long>();
		protected List<long> m_rewardMoneys = new List<long>();
		string m_additionalData = "";

        #region Construction

        /// <summary>
        /// Add a goal for this quest. No unique indentifier
        /// </summary>		
        protected DQRQuestGoal AddGoal(string description, DQRQuestGoal.GoalType type, int targetNumber, string questItem, string targetObject)
        {
            var goal = new DQRQuestGoal("none", this, description, type, m_goals.Count + 1, targetNumber, questItem, targetObject);
            m_goals.Add(goal);
            return goal;
        }

        /// <summary>
        /// Add a goal for this quest and give it a unique identifier
        /// </summary>		
        protected DQRQuestGoal AddGoal(string id, string description, DQRQuestGoal.GoalType type, int targetNumber, string questItem, string targetObject)
        {
            var goal = new DQRQuestGoal(id, this, description, type, m_goals.Count + 1, targetNumber, questItem, targetObject);
            m_goals.Add(goal);
            return goal;
        }

        /// <summary>
        /// Create an empty Quest
        /// </summary>
        public DQRewardQ()
			: base()
		{
		}

        /// <summary>
        /// DQRewardQ object used for delving RewardItems or other information
        /// </summary>
        /// <param name="dataQuest"></param>
        public DQRewardQ(DBRewardQuest dataQuest)
        {
            m_questPlayer = null;
            m_step = 1;
            m_dataQuest = dataQuest;
            ParseQuestData();
        }

		/// <summary>
		/// DQRewardQ object assigned to an object or NPC that is used to start or offer the quest
		/// </summary>
		/// <param name="dbQuest"></param>
		public DQRewardQ(DBRewardQuest dataQuest, GameObject startingObject)
		{
			m_questPlayer = null;
			m_step = 1;
			m_dataQuest = dataQuest;
            m_startObject = startingObject;
            m_lastErrorText = "";
            //ParseSearchAreas();
            ParseQuestData();
		}

        /// <summary>
        /// This HybridDictionary holds all the custom properties of this quest
        /// </summary>
        protected readonly HybridDictionary m_DQcustomProperties = new HybridDictionary();


        /// <summary>
        /// This method parses the custom properties string of the m_dbQuest
        /// into the HybridDictionary for easier use and access
        /// </summary>
        public void ParseDQCustomProperties()
        {
            if (m_charQuest.CustomPropertiesString == null)
                return;

            lock (m_DQcustomProperties)
            {
                m_DQcustomProperties.Clear();
                foreach (string property in Util.SplitCSV(m_charQuest.CustomPropertiesString))
                {
                    if (property.Length > 0)
                    {
                        string[] values = property.Split('=');
                        m_DQcustomProperties[values[0]] = values[1];
                    }
                }
            }
        }

        /// <summary>
        /// DQRewardQ that belongs to a player
        /// </summary>
        /// <param name="questingPlayer"></param>
        /// <param name="dataQuest"></param>
        /// <param name="charQuest"></param>
        public DQRewardQ(GamePlayer questingPlayer, DBRewardQuest dataQuest, CharacterXRewardQuest charQuest)
		{
            m_questPlayer = questingPlayer;
            m_step = 1;
            m_dataQuest = dataQuest;
            m_charQuest = charQuest;
            ParseQuestData();
            ParseDQCustomProperties();

            firstGoals = m_goalStepPosition.Count(x => x == 1);

            for (int i = 0; i < (m_DQcustomProperties.Count / 2); i++)
            {
                if (m_collectItems.Count > 0 && m_collectItems[i] != null)
                {
                    collectItem = m_collectItems[i];
                }
                newgoals = AddGoal(m_questGoals[i], m_goalType[i], m_goalRepeatNo[i], collectItem, m_goalTargetName[i]);
            }
        }

		/// <summary>
		/// This is a DQRewardQ that belongs to a player
		/// </summary>
		/// <param name="questingPlayer"></param>
		/// <param name="dbQuest"></param>
		/// <param name="charQuest"></param>
		public DQRewardQ(GamePlayer questingPlayer, GameObject sourceObject, DBRewardQuest dataQuest, CharacterXRewardQuest charQuest)
		{
			m_questPlayer = questingPlayer;
			m_step = 1;
			m_dataQuest = dataQuest;
			m_charQuest = charQuest;

			if (sourceObject != null)
			{
				if (sourceObject is GameNPC)
				{
					m_startNPC = sourceObject as GameNPC;
				}

				m_startObject = sourceObject;
			}

			ParseQuestData();
            ParseDQCustomProperties();

            firstGoals = m_goalStepPosition.Count(x => x == 1);

            for (int i = 0; i < firstGoals; i++)
            {
                if (m_collectItems.Count > 0 && m_collectItems[i] != null)
                {
                    collectItem = m_collectItems[i];
                }
                newgoals = AddGoal(m_questGoals[i], m_goalType[i], m_goalRepeatNo[i], collectItem, m_goalTargetName[i]);
            }
        }

		[ScriptLoadedEvent]
		public static void ScriptLoaded(DOLEvent e, object sender, EventArgs args)
		{
			GameEventMgr.AddHandler(GamePlayerEvent.AcceptQuest, new DOLEventHandler(DQRewardQuestNotify));
			GameEventMgr.AddHandler(GamePlayerEvent.DeclineQuest, new DOLEventHandler(DQRewardQuestNotify));
		}


		#endregion Construction

		#region Parse Quest Data

		/// <summary>
		/// Split the quest strings into individual step data
		/// It's important to remember that there must be an entry, even if empty, for each column for each step.
		/// For example; something|||something for a 4 part quest
		/// </summary>
		protected void ParseQuestData()
		{
            if (m_dataQuest == null)
                return;

            string lastParse = "";

            try
            {
                string[] parse1;
                // quest goals
                lastParse = m_dataQuest.QuestGoals;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        string[] parse2 = str.Split(';');
                        m_questGoals.Add(parse2[0]);
                        m_goalStepPosition.Add(Convert.ToUInt16(parse2[1]));
                    }
                }
                // what type of goal this is? kill, interact
                lastParse = m_dataQuest.GoalType;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_goalType.Add((DQRQuestGoal.GoalType)Convert.ToByte(str));
                    }
                }
                // target for the goal ie: (0/5)
                lastParse = m_dataQuest.GoalRepeatNo;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_goalRepeatNo.Add(Convert.ToUInt16(str));
                    }
                }
                // the name of the target in the goal
                lastParse = m_dataQuest.GoalTargetName;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_goalTargetName.Add(str);
                    }
                }
                // target text if this is a interact goaltype
                lastParse = m_dataQuest.GoalTargetText;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_goalTargetText.Add(str);
                    }
                }
                // the text that must be whispered to the target to advance the quest
                lastParse = m_dataQuest.AdvanceText;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_advanceTexts.Add(str);
                    }
                }
                // the dummy itemtemplates used to collect/deliver items in journal
                lastParse = m_dataQuest.CollectItemTemplate;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_collectItems.Add(str);
                    }
                }
                // list of optional rewards for this quest
                lastParse = m_dataQuest.OptionalRewardItemTemplates;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    m_numOptionalRewardsChoice = Convert.ToByte(lastParse.Substring(0, 1));
                    parse1 = lastParse.Substring(1).Split('|');
                    foreach (string str in parse1)
                    {
                        if (!string.IsNullOrEmpty(str))
                        {
                            ItemTemplate item = GameServer.Database.FindObjectByKey<ItemTemplate>(str);
                            if (item != null)
                            {
                                m_optionalRewards.Add(item);
                            }
                            else
                            {
                                string errorText = string.Format("DataQuest: Optional reward ItemTemplate not found: {0}", str);
                                log.Error(errorText);
                                m_lastErrorText += " " + errorText;
                            }
                        }
                    }
                }
                // list of standard rewards for this quest
                lastParse = m_dataQuest.FinalRewardItemTemplates;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        ItemTemplate item = GameServer.Database.FindObjectByKey<ItemTemplate>(str);
                        if (item != null)
                        {
                            m_finalRewards.Add(item);
                        }
                        else
                        {
                            string errorText = string.Format("DataQuest: Final reward ItemTemplate not found: {0}", str);
                            log.Error(errorText);
                            m_lastErrorText += " " + errorText;
                        }
                    }
                }
                // quest dependency required to start this quest
                lastParse = m_dataQuest.QuestDependency;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        if (str != "")
                        {
                            m_questDependencies.Add(str);
                        }
                    }
                }
                // allowed classes who can be offered this quest
                lastParse = m_dataQuest.AllowedClasses;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_allowedClasses.Add(Convert.ToByte(str));
                    }
                }
                // quest classtype, used if tying to implement custom code to execute with this quest
                lastParse = m_dataQuest.ClassType;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    m_classType = lastParse;
                }
                // xloc for questgoal dot on map
                lastParse = m_dataQuest.XOffset;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_xOffset.Add(Convert.ToInt32(str));
                    }
                }
                // yloc for questgoal dot on map
                lastParse = m_dataQuest.YOffset;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_yOffset.Add(Convert.ToInt32(str));
                    }
                }
                // zoneid for questgoal dot on map
                lastParse = m_dataQuest.ZoneID;
                if (!string.IsNullOrEmpty(lastParse))
                {
                    parse1 = lastParse.Split('|');
                    foreach (string str in parse1)
                    {
                        m_zoneID.Add(Convert.ToInt32(str));
                    }
                }
            }

            catch (Exception ex)
            {
                string errorText = "Error parsing quest data for " + m_dataQuest.QuestName + " (" + m_dataQuest.ID + "), last string to parse = '" + lastParse + "'.";
                log.Error(errorText, ex);
                m_lastErrorText += " " + errorText + " " + ex.Message;
            }
        }

        /// <summary>
        /// The current goal that is being checked for data
        /// </summary>
        public DQRQuestGoal CurrentGoal { get; private set; }


        /// <summary>
        /// List of all goals for this quest
        /// </summary>
        public List<DQRQuestGoal> Goals
        {
            get { return m_goals; }
        }

        /// <summary>
        /// Checks if all the goals for this quest are completed
        /// </summary>
        /// <returns>true if all goals are completed</returns>
        public bool CheckGoalsCompleted()
        {
            foreach (DQRQuestGoal goal in Goals)
            {
                if (goal.Type == DQRQuestGoal.GoalType.InteractFinish)
                {
                    return true;
                }
                if (!goal.IsAchieved)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Checks for new goals and adds them to players journal for that quest
        /// </summary>
        public void AddNewGoals()
        {
            try
            {
                foreach (int nextGoals in m_goalStepPosition)
                {
                    if (nextGoals == Step)
                    {
                        int index = m_goalStepPosition.IndexOf(nextGoals);
                        collectItem = "";
                        if (m_collectItems.Count > 0 && m_collectItems[index] != null)
                        {
                            collectItem = m_collectItems[index];
                        }

                        newgoals = AddGoal(m_questGoals[index], m_goalType[index], m_goalRepeatNo[index], collectItem, m_goalTargetName[index]);
                        CurrentGoal = newgoals;// we do this , to check for an interactfinish goaltype
                    }
                }
                m_questPlayer.Out.SendQuestListUpdate();
                m_questPlayer.Out.SendMessage("To see the next step, open your Journal", eChatType.CT_ScreenCenter, eChatLoc.CL_SystemWindow);
                m_questPlayer.Out.SendMessage("To see the next step, open your Journal", eChatType.CT_Important, eChatLoc.CL_SystemWindow);

                if (m_startNPC != null)
                {
                    UpdateQuestIndicator(m_startNPC, m_questPlayer);
                }

                foreach (GameNPC npc in m_questPlayer.GetNPCsInRadius(WorldMgr.VISIBILITY_DISTANCE))
                {
                    UpdateQuestIndicator(npc, m_questPlayer);
                }
            }
            catch (Exception ex)
            {
                log.Error("error adding extra goals", ex);
            }
        }

        /// <summary>
        /// Name of this quest to show in quest log
        /// </summary>
        public override string Name
        {
            get { return m_dataQuest.QuestName; }
        }


        #endregion Parse Quest Data

        #region Properties

        /// <summary>
        /// Get the quest 'story' formatted with personalized messaging in the packet
        /// </summary>
        public string Story
        {
            get { return m_dataQuest.StoryText; }
        }

        /// <summary>
        /// Additional text sent to the player upon accepting the quest
        /// </summary>
        public string AcceptText
        {
            get { return m_dataQuest.AcceptText; }
        }

        /// <summary>
        /// List of final rewards for this quest
        /// </summary>
        public virtual List<ItemTemplate> FinalRewards
        {
            get { return m_finalRewards; }
        }


		/// <summary>
		/// What object started this quest
		/// </summary>
		public virtual GameObject StartObject
		{
			get { return m_startObject; }
			set { m_startObject = value; }
		}


		/// <summary>
		/// How many optional items can the player choose
		/// </summary>
		public virtual byte NumOptionalRewardsChoice
		{
			get { return m_numOptionalRewardsChoice; }
			set { m_numOptionalRewardsChoice = value; }
		}

		/// <summary>
		/// List of optional rewards for this quest
		/// </summary>
		public virtual List<ItemTemplate> OptionalRewards
		{
			get { return m_optionalRewards; }
			set { m_optionalRewards = value; }
		}

		/// <summary>
		/// List of all the items the player has chosen
		/// </summary>
		public virtual List<ItemTemplate> OptionalRewardsChoice
		{
			get { return m_optionalRewardChoice; }
		}

		/// <summary>
		/// Array of each optional reward item choice (0-7)
		/// </summary>
		public virtual int[] RewardItemsChosen
		{
			get { return m_rewardItemsChosen; }
		}

		/// <summary>
		/// Final text to display to player when quest is finished
		/// </summary>
		public virtual string FinishText
		{
			get 
            {
                return BehaviourUtils.GetPersonalizedMessage(m_dataQuest.FinishText, m_questPlayer);
            }
		}

		/// <summary>
		/// The DBDQRewardQ for this quest
		/// </summary>
		public virtual DBRewardQuest DBDataQuest
		{
			get { return m_dataQuest; }
		}


		/// <summary>
		/// The CharacterXDQRewardQ entry for the player doing this quest
		/// </summary>
		public virtual CharacterXRewardQuest CharDataQuest
		{
			get { return m_charQuest; }
		}

		/// <summary>
		/// The unique ID for this quest
		/// </summary>
		public virtual int ID
		{
			get { return m_dataQuest.ID; }
		}

		/// <summary>
		/// Unique quest ID to send to the client
		/// </summary>
		public virtual ushort ClientQuestID
		{
			get { return (ushort)(m_dataQuest.ID + DQREWARDQ_CLIENTOFFSET); }
		}


		/// <summary>
		/// Minimum level this quest can be done
		/// </summary>
		public override int Level
		{
			get	{ return m_dataQuest.MinLevel; }
		}


		/// <summary>
		/// Max level that this quest can be done
		/// </summary>
		public virtual int MaxLevel
		{
			get { return m_dataQuest.MaxLevel; }
		}

		/// <summary>
		/// Text of every step in this quest
		/// </summary>
		public virtual List<string> StepTexts
		{
			get { return m_stepTexts; }
		}

        /// <summary>
        /// The amount of times a player has completed this quest
        /// </summary>
        public virtual short Count
        {
            get { return m_charQuest != null ? m_charQuest.Count : (short)0; }
            set
            {
                short oldCount = m_charQuest.Count;
                m_charQuest.Count = value;
                if (m_charQuest.Count != oldCount)
                {
                    GameServer.Database.SaveObject(m_charQuest);
                }
            }
        }
        /*public virtual short Count
		{
			get 
			{
				if (m_charQuest != null)
				{
					return m_charQuest.Count;
				}

				return 0; 
			}
			set
			{
				short oldCount = m_charQuest.Count;
				m_charQuest.Count = value;
				if (m_charQuest.Count != oldCount)
				{
					GameServer.Database.SaveObject(m_charQuest);
				}
			}
		}*/
		
		/// <summary>
		/// Maximum number of times this quest can be done
		/// </summary>
		public override int MaxQuestCount
		{
			get
			{
				if (m_dataQuest.MaxCount == 0)
					return int.MaxValue;

				return m_dataQuest.MaxCount;
			}
		}

        /// <summary>
        /// Description of this quest to show in quest log
        /// </summary>
        public override string Description
        {
            get { return m_dataQuest.Summary; }
        }

        /// <summary>
        /// ZoneID used for displaying quest dot on map
        /// </summary>
        public List<int> ZoneID
        {
            get { return m_zoneID; }
        }

        /// <summary>
        /// xoffset used for displaying quest dot on map
        /// </summary>
        public List<int> XOffset
        {
            get { return m_xOffset; }
        }
        /// <summary>
        /// yoffset used for displaying quest dot on map
        /// </summary>
        public List<int> YOffset
        {
            get { return m_yOffset; }
        }

        /// <summary>
        /// Current step of this quest. Only used to determine if quest is completed or active. 0 = complete, 1 = active
        /// </summary>
        public override int Step
        {
            get { return m_charQuest == null ? 0 : m_charQuest.Step; }
            set
            {
                if (m_charQuest != null)
                {
                    int oldStep = m_charQuest.Step;
                    m_charQuest.Step = (short)value;
                    if (m_charQuest.Step != oldStep)
                    {
                        GameServer.Database.SaveObject(m_charQuest);
                    }
                }
            }
        }

        /// <summary>
        /// Current step of this quest. Only used to determine if quest is completed or active. 0 = complete, 1 = active
        /// </summary>
        public int StepCount
        {
            get { return m_dataQuest.StepCount; }
        }

        /// <summary>
        /// Additional data following ClassType 
        /// </summary>
        public string AdditionalData
		{
			get { return m_additionalData; }
		}

		#endregion Properties

		#region Utility

		/// <summary>
		/// Get or create the CharacterXDQRewardQ for this player
		/// </summary>
		/// <param name="player"></param>
		/// <returns></returns>
		public static CharacterXRewardQuest GetCharacterQuest(GamePlayer player, int ID, bool create)
		{
			CharacterXRewardQuest charQuest = DOLDB<CharacterXRewardQuest>.SelectObject(DB.Column(nameof(CharacterXRewardQuest.Character_ID)).IsEqualTo(player.QuestPlayerID).And(DB.Column(nameof(CharacterXRewardQuest.DataQuestID)).IsEqualTo(ID)));

			if (charQuest == null && create)
			{
				charQuest = new CharacterXRewardQuest(player.QuestPlayerID, ID);
				charQuest.Count = 0;
				charQuest.Step = 0;
				GameServer.Database.AddObject(charQuest);
			}

			return charQuest;
		}

        /// <summary>
        /// Can this player do this quest
        /// </summary>
        /// <param name="player"></param>
        /// <returns></returns>
        public override bool CheckQuestQualification(GamePlayer player)
        {
            if (player.Level < m_dataQuest.MinLevel || player.Level > m_dataQuest.MaxLevel)
            {
                return false;
            }

            if (m_allowedClasses.Count > 0)
            {
                if (!m_allowedClasses.Contains((byte)player.CharacterClass.ID))
                {
                    return false;
                }
            }

            lock (player.QuestList)
            {
                foreach (AbstractQuest q in player.QuestList)
                {
                    if (q is DQRewardQ && (q as DQRewardQ).ID == ID)
                    {
                        return false;  // player is currently doing this quest
                    }
                }
            }

            lock (player.QuestListFinished)
            {
                foreach (AbstractQuest q in player.QuestListFinished)
                {
                    if (q is DQRewardQ && (q as DQRewardQ).ID == ID)
                    {
                        if (q.IsDoingQuest(q) || (q as DQRewardQ).Count >= MaxQuestCount)
                        {
                            return false; // player has done this quest the max number of times
                        }
                    }
                }

                // check to see if this quest requires another to be done first TODO change questdependancy to check for quest id maybe?
                if (m_questDependencies.Count > 0)
                {
                    int numFound = 0;

                    foreach (string str in m_questDependencies)
                    {
                        foreach (AbstractQuest q in player.QuestListFinished)
                        {
                            if (q is DQRewardQ && (q as DQRewardQ).Name.ToLower() == str.ToLower())
                            {
                                numFound++;
                                break;
                            }
                        }
                    }

                    if (numFound < m_questDependencies.Count)
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// Is the player currently doing this quest
        /// </summary>		
        public override bool IsDoingQuest(AbstractQuest checkQuest)
        {
            if (checkQuest is DQRewardQ && (checkQuest as DQRewardQ).ID == ID)
            {
                return Step > 0;
            }

            return false;
        }


        /// <summary>
        /// Update the quest indicator
        /// </summary>		
        public virtual void UpdateQuestIndicator(GameNPC npc, GamePlayer player)
        {
            player.Out.SendNPCsQuestEffect(npc, npc.GetQuestIndicator(player));
        }

        /// <summary>
        /// Name of target that you interact with to finish the quest
        /// </summary>
        public string FinishName
        {
            get
            {
                try
                {
                    return m_dataQuest.FinishNPC;
                }
                catch (Exception ex)
                {
                    log.Error("DataQuest [" + ID + "] no finish target set", ex);
                    return "";
                }
            }
        }

        /// <summary>
        /// Target text for the current step
        /// </summary>
        protected string GoalTargetText
        {
            get
            {
                try
                {
                    return m_goalTargetText.Count > 0 ? m_goalTargetText[CurrentGoal.GoalIndex - 1] : string.Empty;
                }
                catch (Exception ex)
                {
                    log.Error("DataQuest [" + ID + "] TargetText error for Step " + Step, ex);
                }

                return "Error retrieving target text for step " + Step;
            }
        }

        /// <summary>
        /// Text needed to advance the step or end the quest for the current step
        /// </summary>
        public string AdvanceText
        {
            get
            {
                try
                {
                    if (m_advanceTexts.Count > 0 && CurrentGoal != null)
                    {
                        return !string.IsNullOrEmpty(m_advanceTexts[CurrentGoal.GoalIndex]) ? m_advanceTexts[CurrentGoal.GoalIndex] : "";
                    }
                }
                catch (Exception ex)
                {
                    log.Error("DataQuest [" + ID + "] AdvanceText error for Step " + Step, ex);
                    if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, "DataQuest [" + ID + "] AdvanceText error for Step " + Step);
                }

                return "";
            }
        }



		/// <summary>
		/// Source text for the current step
		/// </summary>
		protected string SourceText
		{
			get
			{
				try
				{
					return m_sourceTexts[Step - 1];
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] SourceText error for Step " + Step, ex);
				}

				return "Error retrieving source text for step " + Step;
			}
		}

		/// <summary>
		/// Target name for the current step
		/// </summary>
		public string TargetName
		{
			get
			{
				try
				{
					if (m_targetNames.Count > 0)
					{
						return m_targetNames[Step - 1];
					}
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] TargetName error for Step " + Step, ex);
				}

				return "";
			}
		}

		/// <summary>
		/// Target region for the current step
		/// </summary>
		public ushort TargetRegion
		{
			get
			{
				try
				{
					if (m_targetRegions.Count > 0)
					{
						return m_targetRegions[Step - 1];
					}
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] TargetRegion error for Step " + Step, ex);
				}

				return 0;
			}
		}

		/// <summary>
		/// Target text for the current step
		/// </summary>
		protected string TargetText
		{
			get
			{
				try
				{					
					if (m_targetTexts.Count > 0)
					{
						if (Step < 1)
						{
							return m_targetTexts[0];
						}
						return m_targetTexts[Step - 1];
					}
					else
					{
						return string.Empty;
					}
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] TargetText error for Step " + Step, ex);
				}

				return "Error retrieving target text for step " + Step;
			}
		}

		/// <summary>
		/// Current step type
		/// </summary>
		public eStepType StepType
		{
			get
			{
				try
				{
					return m_stepTypes[Step - 1];
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] StepType error for Step " + Step, ex);
				}

				return eStepType.Unknown;
			}
		}

		/// <summary>
		/// Step description to show in quest log for the current step
		/// </summary>
		protected string StepText
		{
			get
			{
				try
				{
                    if (QuestPlayer != null && QuestPlayer.Client.Account.PrivLevel > 1)
                    {
                        string text = m_stepTexts[Step - 1];
                        text += " [DEBUG] SType = " + StepType;
                        if (StepType == eStepType.Collect || StepType == eStepType.CollectFinish)
                        {
                            text += ": cit: " + CollectItemTemplate;
                            text += ", Trg: " + TargetName;
                        }
                        else if (StepType == eStepType.Deliver || StepType == eStepType.DeliverFinish || StepType == eStepType.Search)
                        {
                            text += ": sit: " + StepItemTemplate;
                            text += " Trg: " + TargetName;
                        }
                        else if (StepType == eStepType.SearchFinish)
                        {
                            text += ": frit: " + FinalRewards;
                        }
                        else
                        {
                            if (StepType == eStepType.Whisper || StepType == eStepType.WhisperFinish)
                            {
                                text += ": [" + AdvanceText + "]";
                            }

                            text += ", Trg: " + TargetName;
                        }

                        return text;
                    }

					return m_stepTexts[Step - 1];
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] StepText error for Step " + Step, ex);
				}

				return "Error retrieving step text for step " + Step;
			}
		}

		/// <summary>
		/// An item template to give to the player for this step
		/// </summary>
		protected string StepItemTemplate
		{
			get
			{
				try
				{
					if (m_stepItemTemplates.Count > 0)
					{
						return m_stepItemTemplates[Step - 1].Trim();
					}
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] StepItemTemplate error for Step " + Step, ex);
                    if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, "DQRewardQ [" + ID + "] StepItemTemplate error for Step " + Step);
                }

				return "";
			}
		}

		/// <summary>
		/// The item template player needs to turn in to advance this quest.
		/// </summary>
		protected string CollectItemTemplate
		{
			get
			{
				try
				{
					if (m_collectItems.Count > 0)
					{
						return m_collectItems[Step - 1];
					}
				}
				catch (Exception ex)
				{
					log.Error("DQRewardQ [" + ID + "] CollectItemTemplate error for Step " + Step, ex);
                    if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, "DQRewardQ [" + ID + "] CollectItemTemplate error for Step " + Step);
                }

				return "";
			}
		}


 
        /// <summary>
        /// Any money reward for the current step
        /// </summary>
        public long RewardMoney
        {
            get { return m_dataQuest.RewardMoney; }
        }


        /// <summary>
        /// Xp reward for completing quest
        /// </summary>
        protected long RewardXP
        {
            get { return m_dataQuest.RewardXP; }
        }

        /// <summary>
        /// Championlevel xp for completing quest
        /// </summary>
        protected long RewardCLXP
        {
            get { return m_dataQuest.RewardCLXP; }
        }

        /// <summary>
        /// RPs for completing quest
        /// </summary>
        protected long RewardRP
        {
            get { return m_dataQuest.RewardRP; }
        }

        /// <summary>
        /// BPs for completing quest
        /// </summary>
        protected long RewardBP
        {
            get { return m_dataQuest.RewardBP; }
        }

        /// <summary>
        /// Gets money reward for reward quests. Used for sending packet info to dialog popup window.
        /// </summary>
        /// <returns></returns>
        public long MoneyReward()
		{
			if (m_rewardMoneys.Count < 1)
			{
				return 0;
			}
			return m_rewardMoneys[0];
		}

        /// <summary>
        /// The experience reward for a player, displayed as a percentage of thier current level in quest window
        /// </summary>		
        public int ExperiencePercent(GamePlayer player)
        {
            int currentLevel = player.Level;
            if (currentLevel > player.MaxLevel)
            {
                return 0;
            }
            long experienceToLevel = player.GetExperienceNeededForLevel(currentLevel + 1) -
                player.GetExperienceNeededForLevel(currentLevel);

            return (int)((RewardXP * 100) / experienceToLevel);
        }

        /// <summary>
        /// Executes a custom class attached to this quest. Not supported yet
        /// </summary>
        protected virtual bool ExecuteCustomQuestStep(GamePlayer player, int step, eGoalTypeCheck goalTypeCheck)
        {
            bool canContinue = true;

            if (!string.IsNullOrEmpty(m_classType))
            {
                if (m_customQuestStep == null)
                {
                    foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
                    {
                        if (assembly.GetType(m_classType) != null)
                        {
                            try
                            {
                                m_customQuestStep = assembly.CreateInstance(m_classType, false, BindingFlags.CreateInstance, null, new object[] { }, null, null) as IDQRewardQStep;
                            }
                            catch (Exception e)
                            {
                                log.Error(" Error creating an instance of custom step class", e);
                            }

                            break;
                        }
                    }

                    if (m_customQuestStep == null)
                    {
                        foreach (Assembly assembly in ScriptMgr.Scripts)
                        {
                            if (assembly.GetType(m_classType) != null)
                            {
                                try
                                {
                                    m_customQuestStep = assembly.CreateInstance(m_classType, false, BindingFlags.CreateInstance, null, new object[] { }, null, null) as IDQRewardQStep;
                                }
                                catch (Exception e)
                                {
                                    log.Error(" Error creating an instance of custom step class in GSS folder", e);
                                }

                                break;
                            }
                        }
                    }
                }

                if (m_customQuestStep == null)
                {
                    log.ErrorFormat("Failed to construct custom DataQuest step of ClassType {0}!  Quest will continue anyway.", m_classType);
                    if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, string.Format("Failed to construct custom DataQuest step of ClassType {0}!  Quest will continue anyway.", m_classType));
                }
            }

            if (m_customQuestStep != null)
            {
                canContinue = m_customQuestStep.Execute(this, player, step, goalTypeCheck);
            }

            return canContinue;
        }


        /// <summary>
        /// Checks if all the goals for this quest are completed
        /// </summary>
        /// <returns>true if all goals are completed</returns>
        public bool GoalsCompleted()
        {
            foreach (DQRQuestGoal goal in Goals)
            {
                if (!goal.IsAchieved)
                {
                    return false;
                }
            }
            ++Step;
            // all current goals are completed, increase step so we can see if there are more Steps
            if (Step <= StepCount)
            {
                AddNewGoals();
                return false;
            }

            return true;
        }


        /// <summary>
        /// Try to advance the quest step, doing any actions required to start the next step
        /// </summary>		
        protected virtual bool AdvanceQuestStep(GameObject obj = null)
        {
            try
            {
                bool advance = false;

                if (ExecuteCustomQuestStep(QuestPlayer, Step, eGoalTypeCheck.Step))
                {
                    advance = true;
                }

                if (advance)
                {

                    CurrentGoal.Advance();
                    //_questPlayer.Out.SendQuestListUpdate(); //TODO check which is better, this call, or the one in the questgoal.advance


                    if (GoalsCompleted() && CurrentGoal.Type == DQRQuestGoal.GoalType.InteractFinish)
                    {
                        if (obj as GameNPC != null && FinishName == obj.Name)
                        {
                            m_questPlayer.Out.SendQuestRewardWindow(obj as GameNPC, m_questPlayer, this);
                            return true;
                        }
                    }

                    // Then say any source text for the new step
                    /* TODO maybe put something here to support text after receiving a quest item or something
					if (!string.IsNullOrEmpty(SourceText))
					{
						TryTurnTo(obj, _questPlayer);

						if (obj != null)
                        {
                            if (obj.Realm == eRealm.None)
                            {
                                SendMessage(_questPlayer, SourceText, 0, eChatType.CT_Say, eChatLoc.CL_ChatWindow);
                            }
                            else
                            {
                                SendMessage(_questPlayer, SourceText, 0, eChatType.CT_System, eChatLoc.CL_PopupWindow);
                            }
                        }
					}*/

                    return true;
                }
            }
            catch (Exception ex)
            {
                log.Error("DataQuest [" + ID + "] AdvanceQuestStep error when advancing from Step " + Step, ex);
                if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, "[DEBUG] AdvanceQuestStep error when advancing from Step " + Step + ": " + ex.Message);
            }

            return false;
        }


        #endregion Utility

        /// <summary>
        /// This method sets a custom Property to a specific value
        /// </summary>		
        public void SetDQCustomProperty(string key, string value)
        {
            if (key == null)
                throw new ArgumentNullException("key");
            if (value == null)
                throw new ArgumentNullException("value");

            //Make the string safe
            key = key.Replace(';', ',');
            key = key.Replace('=', '-');
            value = value.Replace(';', ',');
            value = value.Replace('=', '-');
            lock (m_DQcustomProperties)
            {
                m_DQcustomProperties[key] = value;
            }
            SaveDQCustomProperties();
        }

        /// <summary>
        /// Saves the custom properties into the database
        /// </summary>
        protected void SaveDQCustomProperties()
        {
            var builder = new StringBuilder();
            lock (m_DQcustomProperties)
            {
                foreach (string hKey in m_DQcustomProperties.Keys)
                {
                    builder.Append(hKey);
                    builder.Append("=");
                    builder.Append(m_DQcustomProperties[hKey]);
                    builder.Append(";");
                }
            }
            m_charQuest.CustomPropertiesString = builder.ToString();
            SaveIntoDatabase();
        }
        /// <summary>
        /// This method retrieves a custom property from the database
        /// </summary>
        public string GetDQCustomProperty(string key)
        {
            if (key == null)
                throw new ArgumentNullException("key");

            return (string)m_DQcustomProperties[key];
        }
        /// <summary>
        /// This method clears the custom property string to remove problems with repeatable quests
        /// </summary>
        protected void ClearDQCustomProperties()
        {
            if (m_charQuest.CustomPropertiesString == null)
            {
                return;
            }
            m_charQuest.CustomPropertiesString = "";
            // TODO check this. Might need to be a value such as "Completed"
        }
        #region Notify

        /// <summary>
        /// Notify is sent to all quests in the players active quest list
        /// </summary>		
        public override void Notify(DOLEvent e, object sender, EventArgs args)
        {
            try
            {
                // Interact to check quest offer
                if (e == GameObjectEvent.Interact)
                {
                    var a = args as InteractEventArgs;
                    var o = sender as GameObject;
                    var p = a.Source as GamePlayer;

                    if (p != null && o != null)
                    {
                        CheckOfferQuest(p, o);
                    }

                    return;
                }

                // Interact when already doing quest
                if (e == GamePlayerEvent.InteractWith)
                {
                    var p = sender as GamePlayer;
                    var a = args as InteractWithEventArgs;
                    OnPlayerInteract(p, a.Target);

                    return;
                }

                if (e == GamePlayerEvent.Whisper)
                {
                    WhisperEventArgs a = args as WhisperEventArgs;
                    GamePlayer p = sender as GamePlayer;

                    if (p != null)
                    {
                        OnPlayerWhisper(p, a.Target, a.Text);
                    }
                }

                // Enemy of player with quest was killed, check quests and steps
                if (e == GamePlayerEvent.EnemyKilled)
                {
                    var a = args as EnemyKilledEventArgs;
                    var player = sender as GamePlayer;
                    GameLiving killed = a.Target;

                    OnEnemyKilled(player, killed);

                    return;
                }

                // Player completes a /search command in quest area
                //if (e == GamePlayerEvent.SearchArea)
                //{
                //    var a = args as AreaEventArgs;
                //    var player = sender as GamePlayer;
                //    OnAreaSearched(player, a.Area as Area.Search);

                //    return;
                //}

                // Player is trying to finish a Reward Quest
                if (e == GamePlayerEvent.QuestRewardChosen)
                {
                    QuestRewardChosenEventArgs rewardArgs = args as QuestRewardChosenEventArgs;
                    if (rewardArgs == null)
                        return;

                    // Check if this particular quest has been finished.

                    if (ClientQuestID != rewardArgs.QuestID)
                        return;

                    m_optionalRewardChoice.Clear();
                    m_rewardItemsChosen = rewardArgs.ItemsChosen;

                    if (ExecuteCustomQuestStep(QuestPlayer, 0, eGoalTypeCheck.RewardsChosen))
                    {
                        if (OptionalRewards.Count > 0)
                        {
                            for (int reward = 0; reward < rewardArgs.CountChosen; ++reward)
                            {
                                m_optionalRewardChoice.Add(OptionalRewards[rewardArgs.ItemsChosen[reward]]);
                            }

                            if (NumOptionalRewardsChoice > 0 && rewardArgs.CountChosen <= 0)
                            {
                                QuestPlayer.Out.SendMessage(LanguageMgr.GetTranslation(QuestPlayer.Client, "RewardQuest.Notify"), eChatType.CT_System, eChatLoc.CL_ChatWindow);
                                return;
                            }
                        }

                        FinishQuest(null);
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error("DataQuest [" + ID + "] Notify Error for " + e.Name, ex);
                if (QuestPlayer != null) ChatUtil.SendDebugMessage(QuestPlayer, "DataQuest [" + ID + "] Notify Error for " + e.Name);
            }
        }

        public static void DQRewardQuestNotify(DOLEvent e, object sender, EventArgs args)
        {
            try
            {   // Reward Quest accept
                if (e == GamePlayerEvent.AcceptQuest)
                {
                    var qargs = args as QuestEventArgs;
                    if (qargs == null)
                        return;

                    GamePlayer player = qargs.Player;
                    GameLiving giver = qargs.Source;

                    foreach (DBRewardQuest quest in GameObject.DQRewardCache)
                    {
                        if ((quest.ID + DQREWARDQ_CLIENTOFFSET) == qargs.QuestID)
                        {
                            CharacterXRewardQuest charQuest = GetCharacterQuest(player, quest.ID, true);
                            var dq = new DQRewardQ(player, giver, quest, charQuest);
                            dq.Step = 1;
                            player.AddQuest(dq);
                            if (giver is GameNPC)
                            {
                                var npc = giver as GameNPC;
                                player.Out.SendNPCsQuestEffect(npc, npc.GetQuestIndicator(player));
                            }
                            player.Out.SendSoundEffect(7, Position.Zero, 0);
                            player.Out.SendMessage("You have acquired the quest: " + dq.Name, eChatType.CT_ScreenCenter, eChatLoc.CL_SystemWindow);
                            if (!string.IsNullOrWhiteSpace(dq.AcceptText))
                            {
                                var formatMsg = dq.AcceptText.Replace(@"\n", "\n");
                                var finalMsg = Util.SplitCSV(formatMsg, true);
                                
                                player.Out.SendCustomTextWindow(giver.Name + " says", finalMsg);
                            }
                            break;
                        }
                    }

                    return;
                }
            }
            catch (Exception ex)
            {
                log.Error("error trying to accept quest", ex);
            }
        }

        /// <summary>
        /// Finish the quest and update the player quest list
        /// </summary>
        public virtual bool FinishQuest(GameObject obj)
        {
            if (m_questPlayer == null || m_charQuest == null || !m_charQuest.IsPersisted)
                return false;

            int lastStep = Step;

            TryTurnTo(obj, m_questPlayer);

            // try rewards first

            lock (m_questPlayer.Inventory)
            {
                if (m_questPlayer.Inventory.IsSlotsFree(m_finalRewards.Count + m_optionalRewardChoice.Count, eInventorySlot.FirstBackpack, eInventorySlot.LastBackpack))
                {
                    const string xpError = "Your XP is turned off, you must turn it on to complete this quest!";
                    const string rpError = "Your RP is turned off, you must turn it on to complete this quest!";

                    if (RewardXP > 0)
                    {
                        if (!m_questPlayer.GainXP) // deny finishing quest if xp or rp is turned off for player
                        {
                            QuestPlayer.Out.SendMessage(xpError, eChatType.CT_Staff, eChatLoc.CL_SystemWindow);
                            return false;
                        }
                        else if (RewardRP > 0 && !m_questPlayer.GainRP)
                        {
                            QuestPlayer.Out.SendMessage(rpError, eChatType.CT_Staff, eChatLoc.CL_SystemWindow);
                            return false;
                        }

                        m_questPlayer.GainExperience(GameLiving.eXPSource.Quest, RewardXP);
                    }

                    if (RewardRP > 0)
                    {
                        if (!m_questPlayer.GainRP)
                        {
                            QuestPlayer.Out.SendMessage(rpError, eChatType.CT_Staff, eChatLoc.CL_SystemWindow);
                            return false;
                        }

                        m_questPlayer.GainRealmPoints(RewardRP);
                    }

                    foreach (ItemTemplate item in m_finalRewards)
                    {
                        if (item != null)
                        {
                            GiveItem(m_questPlayer, item);
                        }
                    }

                    foreach (ItemTemplate item in m_optionalRewardChoice)
                    {
                        if (item != null)
                        {
                            GiveItem(m_questPlayer, item);
                        }
                    }

                    if (RewardCLXP > 0)
                    {
                        m_questPlayer.GainChampionExperience(RewardCLXP, GameLiving.eXPSource.Quest);

                    }

                    if (RewardBP > 0)
                    {
                        m_questPlayer.GainBountyPoints(RewardBP);
                    }

                    if (RewardMoney > 0)
                    {
                        var rewardMoney = Currency.Copper.Mint(RewardMoney);
                        m_questPlayer.AddMoney(rewardMoney);
                        m_questPlayer.SendSystemMessage($"You are awarded {rewardMoney.ToText()}!");
                        InventoryLogging.LogInventoryAction("(QUEST;" + Name + ")", QuestPlayer, eInventoryActionType.Quest, rewardMoney.Amount);
                    }
                }
                else
                {
                    SendMessage(m_questPlayer, "Your inventory does not have enough space to finish this quest!", 0, eChatType.CT_System, eChatLoc.CL_PopupWindow);
                    return false;
                }
            }

            m_charQuest.Step = 0;
            m_charQuest.Count++;
            ClearDQCustomProperties();
            GameServer.Database.SaveObject(m_charQuest);

            m_questPlayer.Out.SendMessage("You have completed the quest: " + Name, eChatType.CT_ScreenCenter, eChatLoc.CL_SystemWindow);
            m_questPlayer.Out.SendMessage(String.Format(LanguageMgr.GetTranslation(m_questPlayer.Client, "AbstractQuest.FinishQuest.Completed", Name)), eChatType.CT_Important, eChatLoc.CL_SystemWindow);

            // Remove this quest from the players active quest list and either
            // Add or update the quest in the players finished list
            m_questPlayer.Out.SendQuestListUpdate();
            m_questPlayer.QuestList.Remove(this);

            bool addq = true;
            lock (m_questPlayer.QuestListFinished)
            {
                foreach (AbstractQuest q in m_questPlayer.QuestListFinished)
                {
                    if (q is DQRewardQ && (q as DQRewardQ).ID == ID)
                    {
                        (q as DQRewardQ).CharDataQuest.Step = 0;
                        (q as DQRewardQ).CharDataQuest.Count++;
                        addq = false;
                        break;
                    }
                }
            }

            if (addq)
            {
                m_questPlayer.QuestListFinished.Add(this);
            }



            // TODO swap sound depending on realm
            m_questPlayer.Out.SendSoundEffect(11, Position.Zero, 0);

            if (obj is GameNPC)
            {
                UpdateQuestIndicator(obj as GameNPC, m_questPlayer);
            }

            if (m_startNPC != null)
            {
                UpdateQuestIndicator(m_startNPC, m_questPlayer);
            }

            foreach (GameNPC npc in m_questPlayer.GetNPCsInRadius(WorldMgr.VISIBILITY_DISTANCE))
            {
                UpdateQuestIndicator(npc, m_questPlayer);
            }

            return true;
        }



        #endregion Notify


        #region Notification Handlers

        /// <summary>
        /// A player has interacted with an object that has a DataQuest.
        /// Check to see if we can offer this quest to the player and display the text
        /// </summary>
        /// <param name="player"></param>
        /// <param name="obj"></param>
        protected virtual void CheckOfferQuest(GamePlayer player, GameObject obj)
        {
            try
            {
                // Can we offer this quest to the player?
                if (CheckQuestQualification(player))
                {
                    // Send offer quest dialog
                    var offerNPC = obj as GameNPC;
                    if (offerNPC != null)
                    {
                        TryTurnTo(obj, player);
                        player.Out.SendQuestOfferWindow(offerNPC, player, this);
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error("error trying to offer quest", ex);
            }
        }

        protected virtual void TryTurnTo(GameObject obj, GamePlayer player)
		{
			GameNPC npc = obj as GameNPC;

			if (npc != null)
			{
				npc.TurnTo(player, 10000);
			}
		}



        /// <summary>
        /// Check if a target object is the current goal target for interact/interactDeliver.
        /// </summary>		
        public bool CheckInteractPending(GameObject target)
        {
            try
            {
                if (target == null)
                {
                    return false;
                }
                foreach (DQRQuestGoal goal in Goals)
                {
                    if (!goal.IsAchieved && (goal.Type == DQRQuestGoal.GoalType.Interact || goal.Type == DQRQuestGoal.GoalType.InteractDeliver || goal.Type == DQRQuestGoal.GoalType.InteractWhisper || goal.Type == DQRQuestGoal.GoalType.InteractFinish) && goal.TargetObject == target.Name)
                    {
                        CurrentGoal = goal;

                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error("error trying to check pending goal", ex);
            }
            return false;
        }

        /// <summary>
        /// Check if a target object shows indicator icon to player.
        /// </summary>		
        public bool CheckInteractPendingIcon(GameObject target)
        {
            try
            {
                if (target == null)
                {
                    return false;
                }
                foreach (DQRQuestGoal goal in Goals)
                {
                    if (!goal.IsAchieved && (goal.Type == DQRQuestGoal.GoalType.Interact || goal.Type == DQRQuestGoal.GoalType.InteractDeliver || goal.Type == DQRQuestGoal.GoalType.InteractWhisper) && goal.TargetObject == target.Name)
                    {
                        CurrentGoal = goal;

                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error("error trying to check pending goal", ex);
            }
            return false;
        }


        /// <summary>
        /// Check if a target object is in players quest goals.
        /// </summary>		
        public bool CheckTargetToGoalList(GameObject target)
        {
            try
            {
                if (target == null)
                {
                    return false;
                }

                foreach (DQRQuestGoal goal in Goals)
                {
                    if (!goal.IsAchieved && goal.TargetObject.Equals(target.Name, StringComparison.OrdinalIgnoreCase) && goal.ZoneID1 == target.CurrentZone.ID)
                    {
                        CurrentGoal = goal;
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error("error checking target to goal list", ex);
            }
            return false;
        }


        /// <summary>
        /// A player with this quest has interacted with an object.
        /// See if this object is part of the quest and respond accordingly
        /// </summary>		
        protected virtual void OnPlayerInteract(GamePlayer player, GameObject obj)
        {
            try
            {
                if (CheckInteractPending(obj))
                {
                    if (CurrentGoal != null)
                    {
                        TryTurnTo(obj, player);
                        if (!string.IsNullOrEmpty(GoalTargetText)) // TODO this might need to be changed to send a custommessage to allow for \n \r formatting
                        {
                            SendMessage(m_questPlayer, GoalTargetText, 0, eChatType.CT_System, eChatLoc.CL_PopupWindow);
                        }
                        if (CurrentGoal.Type == DQRQuestGoal.GoalType.Interact || CurrentGoal.Type == DQRQuestGoal.GoalType.InteractDeliver)
                        {
                            AdvanceQuestStep(obj);
                            if (obj as GameNPC != null)
                            {
                                UpdateQuestIndicator(obj as GameNPC, m_questPlayer);
                            }
                            else
                            {
                                foreach (GamePlayer others in m_questPlayer.GetPlayersInRadius(1000))
                                {
                                    others.Out.SendEmoteAnimation(m_questPlayer, eEmote.PlayerPickup);
                                }
                            }
                            return;
                        }
                        if (CurrentGoal.Type == DQRQuestGoal.GoalType.InteractFinish)
                        {
                            AdvanceQuestStep(obj);
                        }
                        return;
                    }
                }
                if (GoalsCompleted() && obj as GameNPC != null && FinishName == obj.Name)
                {
                    player.Out.SendQuestRewardWindow(obj as GameNPC, player, this);
                    return;
                }
            }
            catch (Exception ex)
            {
                log.Error("error trying to interact", ex);
            }
        }


 


        /// <summary>
        /// A player doing this quest whispers something to a living //TODO interect step of a quest
        /// </summary>		
        public virtual void OnPlayerWhisper(GamePlayer p, GameObject obj, string text)
        {
            if (CurrentGoal != null && CurrentGoal.Type == DQRQuestGoal.GoalType.InteractWhisper && CurrentGoal.TargetObject == obj.Name && CurrentGoal.ZoneID1 == obj.CurrentZone.ID && text == CurrentGoal.AdvanceText)
            {
                AdvanceQuestStep(obj);
            }
        }



        /// <summary>
        /// Enemy of a player with a dqrewardq is killed, check for quest advancement
        /// </summary>		
        protected virtual void OnEnemyKilled(GamePlayer player, GameLiving living)
        {
            if (player != null)
            {
                if (CheckTargetToGoalList(living as GameObject))
                {
                    if (CurrentGoal.Type == DQRQuestGoal.GoalType.Kill)
                    {
                        if (!string.IsNullOrEmpty(GoalTargetText))
                        {
                            if (living.Realm == eRealm.None)
                            {
                                // mobs and other non realm objects send chat text and not popup text.
                                SendMessage(m_questPlayer, GoalTargetText, 0, eChatType.CT_Say, eChatLoc.CL_ChatWindow);
                            }
                            else
                            {
                                SendMessage(m_questPlayer, GoalTargetText, 0, eChatType.CT_System, eChatLoc.CL_PopupWindow);
                            }
                        }
                        AdvanceQuestStep(living);
                    }
                }
            }
        }



        /// <summary>
        /// Triggered from quest commands like /search
        /// </summary>        
        public override bool Command(GamePlayer player, AbstractQuest.eQuestCommand command, AbstractArea area)
        {
            if (player == null || area == null)
            {
                return false;
            }

            foreach (DQRQuestGoal goal in Goals)
            {
                if (!goal.IsAchieved && goal.Type == DQRQuestGoal.GoalType.Search)
                {
                    if (goal.TargetObject.ToLower() == area.Description.ToLower()) // we have the correct area
                    {
                        StartQuestActionTimer(player, command, 3, "You begin searching the area ...");
                        foreach (GamePlayer others in player.GetPlayersInRadius(1000))
                        {
                            others.Out.SendEmoteAnimation(player, eEmote.PlayerPickup);
                        }
                        CurrentGoal = goal;
                        return true;
                    }
                }
            }

            return false;
        }



        /// <summary>
        /// A quest command like /search is completed, so do something // patchsearch
        /// </summary>        
        protected override void QuestCommandCompleted(AbstractQuest.eQuestCommand command, GamePlayer player)
        {
            if (QuestPlayer == player)
            {
                if (!AdvanceQuestStep(null))
                {
                    SendMessage(QuestPlayer, "You fail to find anything!", 0, eChatType.CT_System, eChatLoc.CL_SystemWindow);
                }
            }
        }


        #endregion Notification Handlers




		/// <summary>
		/// Replace special characters in an item string
		/// Supported parsing:
		/// %c = character class
		/// </summary>
		/// <param name="idnb"></param>
		/// <param name="player"></param>
		/// <returns></returns>
		protected virtual string ParseItemString(string idnb, GamePlayer player)
		{
			string parsed = idnb;

			parsed = parsed.Replace("%c", ((eCharacterClass)player.CharacterClass.ID).ToString());

			return parsed;
		}



        /// <summary>
        /// Called to abort the quest and remove it from the database!
        /// </summary>
        public override void AbortQuest()
        {
            if (m_questPlayer == null || m_charQuest == null || !m_charQuest.IsPersisted) return;

            Step = 0;
            m_questPlayer.Out.SendQuestListUpdate();
            m_questPlayer.Out.SendMessage(LanguageMgr.GetTranslation(m_questPlayer.Client, "AbstractQuest.AbortQuest"), eChatType.CT_System, eChatLoc.CL_SystemWindow);

            if (m_questPlayer.QuestList.Contains(this))
            {
                m_questPlayer.QuestList.Remove(this);
            }

            if (m_charQuest.Count == 0)
            {
                if (m_questPlayer.QuestListFinished.Contains(this))
                {
                    m_questPlayer.QuestListFinished.Remove(this);
                }

                DeleteFromDatabase();
            }

            if (m_startNPC != null)
            {
                UpdateQuestIndicator(m_startNPC, m_questPlayer);
            }
            else foreach (GameNPC npc in m_questPlayer.GetNPCsInRadius(WorldMgr.VISIBILITY_DISTANCE))
                {
                    UpdateQuestIndicator(npc, m_questPlayer);
                }
        }


        /// <summary>
        /// Saves this quest into the database
        /// </summary>
        public override void SaveIntoDatabase()
        {
            if (m_charQuest.IsPersisted)
                GameServer.Database.SaveObject(m_charQuest);
            else
                GameServer.Database.AddObject(m_charQuest);
        }

        /// <summary>
        /// Quest aborted, deleting from player
        /// </summary>
        public override void DeleteFromDatabase()
		{
			if (m_charQuest == null || m_charQuest.IsPersisted == false) return;

			CharacterXRewardQuest charQuest = GameServer.Database.FindObjectByKey<CharacterXRewardQuest>(m_charQuest.ID);
			if (charQuest != null)
			{
				GameServer.Database.DeleteObject(charQuest);
			}
		}


    }



    /// <summary>
    /// A single quest goal.
    /// </summary>
    public class DQRQuestGoal
    {
        private DQRewardQ m_quest;
        private string m_description;
        private int m_current, m_target;
        ItemTemplate goalItem = null;

        public enum GoalType : byte
        {
            Search = 2,				// Search in a specified location to advance the goal.
            Kill = 3,               // Kill the target to advance the goal.
            Interact = 4,           // Interact with the target to advance the goal.
            InteractFinish = 5,     // Interact with the target to finish the quest.
            InteractWhisper = 6,    // Whisper to the target to advance the goal. 
            InteractDeliver = 7,    // Deliver a dummy item to the target to advance the goal.
                                    // unsupported Collect = 10,			// Player must give the target an item to advance the step	
            Unknown = 255
        }
        /// <summary>
        /// Constructs a new QuestGoal.
        /// </summary>		
        public DQRQuestGoal(string id, DQRewardQ quest, string description, GoalType type, int index, int target, string questItem, string targetobject)
        {
            m_quest = quest;
            m_description = description;
            Type = type;
            GoalIndex = index;
            m_current = 0;
            m_target = 0;
            Target = target;
            TargetObject = targetobject;
            goalItem = GameServer.Database.FindObjectByKey<ItemTemplate>(questItem);
        }

        /// <summary>
        /// Ready-to-use description of the goal and its current status.
        /// </summary>
        public string Description
        {
            get { return m_quest.QuestPlayer != null ? String.Format("Quest Goal: {0} ({1}/{2})", m_description, Current, Target) : m_description; }
        }

        /// <summary>
        /// The type of the goal, i.e. whether to scout or to kill things.
        /// </summary>
        public GoalType Type { get; private set; }

        public int GoalIndex { get; }
        /// <summary>
        /// Target object for this goal.
        /// </summary>
        public string TargetObject { get; } = "";

        /// <summary>
        /// Target object for this goal.
        /// </summary>
        public string AdvanceText
        {
			get { return m_quest.AdvanceText; }
        }

        /// <summary>
        /// The quest item required for this goal.
        /// </summary>
        public ItemTemplate QuestItem
        {
            get { return ((Current > 0) || Type == GoalType.InteractDeliver || Type == GoalType.InteractFinish) ? goalItem : null; }
            set { goalItem = value; }
        }

        /// <summary>
        /// Current status of this goal.
        /// </summary>
        protected int Current
        {
            get
            {
                if (m_quest.QuestPlayer == null)
                    return m_current;
				String propertyValue = m_quest.GetDQCustomProperty(String.Format("goal{0}Current", GoalIndex));
                if (propertyValue == null)
                {
                    Current = 0;
                    return Current;
                }
                return Int16.Parse(propertyValue);
            }
            set
            {
                if (m_quest.QuestPlayer == null)
                    m_current = value;
                else
                {
                    m_quest.SetDQCustomProperty(String.Format("goal{0}Current", GoalIndex), value.ToString());
                    m_quest.SaveIntoDatabase();
                }
            }
        }

        /// <summary>
        /// Target status of this goal.
        /// </summary>
        protected int Target
        {
            get
            {
                if (m_quest.QuestPlayer == null)
                    return m_current;
				String propertyValue = m_quest.GetDQCustomProperty(String.Format("goal{0}Target", GoalIndex));
                if (propertyValue == null)
                {
                    Target = 0;
                    return Target;
                }
                return Int16.Parse(propertyValue);
            }
            set
            {
                if (m_quest.QuestPlayer == null)
                    m_target = value;
                else
                {
                    m_quest.SetDQCustomProperty(String.Format("goal{0}Target", GoalIndex), value.ToString());
                    m_quest.SaveIntoDatabase();
                }
            }
        }

        /// <summary>
        /// Whether or not the goal has been achieved yet.
        /// </summary>
        public bool IsAchieved
        {
            get { return (Current == Target); }
        }

        public void Advance()
        {
            if (Current < Target)
            {
                Current++;
                m_quest.QuestPlayer.Out.SendMessage(Description, eChatType.CT_ScreenCenter, eChatLoc.CL_SystemWindow);
                m_quest.QuestPlayer.Out.SendQuestUpdate(m_quest);

                // Check for updates
                if (IsAchieved)
                {
                    // check if all quest is achieved
                    bool done = true;
                    foreach (DQRQuestGoal goal in m_quest.Goals)
                    {
                        done &= goal.IsAchieved;
                    }

                    //if (done && m_quest.QuestGiver.IsWithinRadius(m_quest.QuestPlayer, WorldMgr.VISIBILITY_DISTANCE)) // do this elsewhere
                    //	m_quest.QuestPlayer.Out.SendNPCsQuestEffect(m_quest.QuestGiver, m_quest.QuestGiver.GetQuestIndicator(m_quest.QuestPlayer));
                }
            }
        }
        // goal location info to put red dot on map
        public int ZoneID1
        {
			get { return m_quest.ZoneID.ElementAtOrDefault(GoalIndex - 1); }
        }

        public int XOffset1
        {
			get { return m_quest.XOffset.ElementAtOrDefault(GoalIndex - 1); }
        }

        public int YOffset1
        {
			get { return m_quest.YOffset.ElementAtOrDefault(GoalIndex - 1); }
        }
    }
}